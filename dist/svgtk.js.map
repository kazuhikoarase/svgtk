{"version":3,"file":"svgtk.js","sources":["../src/svgtk.ts"],"sourcesContent":["//\n// svgtk\n//\n// Copyright (c) 2023 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//  http://www.opensource.org/licenses/mit-license.php\n//\n\nimport math from './math';\n\ntype ElementParams = {[k : string] : any};\n\ninterface DOMWrapper {\n  $el : HTMLElement | SVGElement | any;\n  on(type : string, l : EventListener) : DOMWrapper;\n  off(type : string, l : EventListener) : DOMWrapper;\n  attrs(params : ElementParams) : DOMWrapper;\n  props(params : ElementParams) : DOMWrapper;\n  style(params : ElementParams) : DOMWrapper;\n  append($elm : DOMWrapper) : DOMWrapper;\n  remove($elm : DOMWrapper) : DOMWrapper;\n};\n\ninterface PathBuilder {\n  moveTo(x : number, y : number) : PathBuilder;\n  lineTo(x : number, y : number) : PathBuilder;\n  quadTo(cx : number, cy : number, x : number, y : number) : PathBuilder;\n  cubicTo(cx1 : number, cy1 : number, cx2 : number, cy2 : number, x : number, y : number) : PathBuilder;\n  close() : PathBuilder;\n  build() : string;\n}\n\ninterface TranBuilder {\n  translate(x : number, y : number) : TranBuilder;\n  rotate(rad : number) : TranBuilder;\n  scale(x : number, y : number) : TranBuilder;\n  skewX(rad : number) : TranBuilder;\n  skewY(rad : number) : TranBuilder;\n  build() : string;\n}\n\nconst domWrapper = function() {\n\n  const svgTagNames : { [tagName : string] : boolean } = {};\n  'svg g path rect circle text'.split(/\\s+/g).forEach(function(tagName) {\n    svgTagNames[tagName] = true;\n  });\n\n  return function(elm : HTMLElement | SVGElement | string) : DOMWrapper {\n    if (typeof elm == 'string') {\n      //elm = elm.toLowerCase();\n      elm = svgTagNames[elm]?\n          document.createElementNS('http://www.w3.org/2000/svg', elm) :\n            document.createElement(elm);\n    }\n    return {\n      $el: elm,\n      on: function(type, l) {\n        this.$el.addEventListener(type, l);\n        return this;\n      },\n      off: function(type, l) {\n        this.$el.removeEventListener(type, l);\n        return this;\n      },\n      attrs: function(params) {\n        for (let k in params) {\n          this.$el.setAttribute(k, '' + params[k]);\n        }\n        return this\n      },\n      props: function(params) {\n        for (let k in params) {\n          this.$el[k] = params[k];\n        }\n        return this\n      },\n      style: function(params) {\n        for (let k in params) {\n          this.$el.style[k] = '' + params[k];\n        }\n        return this\n      },\n      append: function($elm) {\n        this.$el.appendChild($elm.$el);\n        return this;\n      },\n      remove: function($elm) {\n        this.$el.removeChild($elm.$el);\n        return this;\n      }\n    };\n  };\n}();\n\nconst pathBuilder : () => PathBuilder = function() {\n  let d = '';\n  return {\n    moveTo : function(x, y) { d += 'M' + x + ' ' + y; return this; },\n    lineTo : function(x, y) { d += 'L' + x + ' ' + y; return this; },\n    quadTo : function(cx, cy, x, y) {\n      d += 'Q' + cx + ' ' + cy +' ' + x + ' ' + y; return this; },\n    cubicTo : function(cx1, cy1, cx2, cy2, x, y) {\n      d += 'C' + cx1 + ' ' + cy1 +' ' + cx2 + ' ' + cy2 +' ' +\n        x + ' ' + y; return this; },\n    close : function() { d += 'Z'; return this; },\n    build : function() { return d; }\n  };\n};\n\nconst tranBuilder : () => TranBuilder = function() {\n  let t = '';\n  return {\n    translate : function(x, y) {\n      t += 'translate(' + x + ' ' + y + ')'; return this; },\n    rotate : function(rad) { t += 'rotate(' + math.r2d(rad) + ')'; return this; },\n    scale : function(x, y) {\n      t += 'scale(' + x + ' ' + y + ')'; return this; },\n    skewX : function(rad) {\n      t += 'skewX(' + math.r2d(rad) + ')'; return this; },\n    skewY : function(rad) {\n      t += 'skewY(' + math.r2d(rad) + ')'; return this; },\n    build : function() { return t; }\n  };\n};\n\nexport default {\n  domWrapper,\n  pathBuilder,\n  tranBuilder\n};\n"],"names":["domWrapper","svgTagNames","tagName","elm","type","l","params","k","$elm","pathBuilder","d","x","y","cx","cy","cx1","cy1","cx2","cy2","tranBuilder","t","rad","math","svgtk"],"mappings":"0CA4CMA,EAAa,UAAW,CAE5B,MAAMC,EAAiD,CAAA,EACvD,oCAA8B,MAAM,MAAM,EAAE,QAAQ,SAASC,EAAS,CACpED,EAAYC,CAAO,EAAI,EAAA,CACxB,EAEM,SAASC,EAAsD,CACpE,OAAI,OAAOA,GAAO,WAEhBA,EAAMF,EAAYE,CAAG,EACjB,SAAS,gBAAgB,6BAA8BA,CAAG,EACxD,SAAS,cAAcA,CAAG,GAE3B,CACL,IAAKA,EACL,GAAI,SAASC,EAAMC,EAAG,CACpB,YAAK,IAAI,iBAAiBD,EAAMC,CAAC,EAC1B,IAAA,EAET,IAAK,SAASD,EAAMC,EAAG,CACrB,YAAK,IAAI,oBAAoBD,EAAMC,CAAC,EAC7B,IAAA,EAET,MAAO,SAASC,EAAQ,CACtB,QAASC,KAAKD,EACZ,KAAK,IAAI,aAAaC,EAAG,GAAKD,EAAOC,CAAC,CAAC,EAEzC,OAAO,IAAA,EAET,MAAO,SAASD,EAAQ,CACtB,QAASC,KAAKD,EACZ,KAAK,IAAIC,CAAC,EAAID,EAAOC,CAAC,EAExB,OAAO,IAAA,EAET,MAAO,SAASD,EAAQ,CACtB,QAASC,KAAKD,EACZ,KAAK,IAAI,MAAMC,CAAC,EAAI,GAAKD,EAAOC,CAAC,EAEnC,OAAO,IAAA,EAET,OAAQ,SAASC,EAAM,CACrB,YAAK,IAAI,YAAYA,EAAK,GAAG,EACtB,IAAA,EAET,OAAQ,SAASA,EAAM,CACrB,YAAK,IAAI,YAAYA,EAAK,GAAG,EACtB,IAAA,CACT,CACF,CAEJ,EAAA,EAEMC,EAAkC,UAAW,CACjD,IAAIC,EAAI,GACR,MAAO,CACL,OAAS,SAASC,EAAGC,EAAG,CAAE,OAAAF,GAAK,IAAMC,EAAI,IAAMC,EAAU,IAAA,EACzD,OAAS,SAASD,EAAGC,EAAG,CAAE,OAAAF,GAAK,IAAMC,EAAI,IAAMC,EAAU,IAAA,EACzD,OAAS,SAASC,EAAIC,EAAIH,EAAGC,EAAG,CAC9B,OAAAF,GAAK,IAAMG,EAAK,IAAMC,EAAI,IAAMH,EAAI,IAAMC,EAAU,IAAA,EACtD,QAAU,SAASG,EAAKC,EAAKC,EAAKC,EAAKP,EAAGC,EAAG,CAC3C,OAAAF,GAAK,IAAMK,EAAM,IAAMC,EAAK,IAAMC,EAAM,IAAMC,EAAK,IACjDP,EAAI,IAAMC,EAAU,IAAA,EACxB,MAAQ,UAAW,CAAE,OAAAF,GAAK,IAAY,IAAA,EACtC,MAAQ,UAAW,CAAE,OAAOA,CAAA,CAAG,CAEnC,EAEMS,EAAkC,UAAW,CACjD,IAAIC,EAAI,GACR,MAAO,CACL,UAAY,SAAST,EAAGC,EAAG,CACzB,OAAAQ,GAAK,aAAeT,EAAI,IAAMC,EAAI,IAAY,IAAA,EAChD,OAAS,SAASS,EAAK,CAAE,OAAAD,GAAK,UAAYE,EAAK,IAAID,CAAG,EAAI,IAAY,IAAA,EACtE,MAAQ,SAASV,EAAGC,EAAG,CACrB,OAAAQ,GAAK,SAAWT,EAAI,IAAMC,EAAI,IAAY,IAAA,EAC5C,MAAQ,SAASS,EAAK,CACpB,OAAAD,GAAK,SAAWE,EAAK,IAAID,CAAG,EAAI,IAAY,IAAA,EAC9C,MAAQ,SAASA,EAAK,CACpB,OAAAD,GAAK,SAAWE,EAAK,IAAID,CAAG,EAAI,IAAY,IAAA,EAC9C,MAAQ,UAAW,CAAE,OAAOD,CAAA,CAAG,CAEnC,EAEAG,EAAe,CACb,WAAAvB,EACA,YAAAS,EACA,YAAAU,CACF"}